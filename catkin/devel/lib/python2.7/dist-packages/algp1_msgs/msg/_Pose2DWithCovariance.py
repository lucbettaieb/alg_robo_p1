"""autogenerated by genpy from algp1_msgs/Pose2DWithCovariance.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Pose2DWithCovariance(genpy.Message):
  _md5sum = "ec0050e0d8397013a38802a448163fa4"
  _type = "algp1_msgs/Pose2DWithCovariance"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# 2D pose for STDR sim
geometry_msgs/Pose2D pose2d

# Row-major representation of the 3x3 covariance matrix
# (x, y, theta)
float64[9] covariance
================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['pose2d','covariance']
  _slot_types = ['geometry_msgs/Pose2D','float64[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose2d,covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pose2DWithCovariance, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pose2d is None:
        self.pose2d = geometry_msgs.msg.Pose2D()
      if self.covariance is None:
        self.covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.pose2d = geometry_msgs.msg.Pose2D()
      self.covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.pose2d.x, _x.pose2d.y, _x.pose2d.theta))
      buff.write(_struct_9d.pack(*self.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose2d is None:
        self.pose2d = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.pose2d.x, _x.pose2d.y, _x.pose2d.theta,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.covariance = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.pose2d.x, _x.pose2d.y, _x.pose2d.theta))
      buff.write(self.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose2d is None:
        self.pose2d = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.pose2d.x, _x.pose2d.y, _x.pose2d.theta,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9d = struct.Struct("<9d")
_struct_3d = struct.Struct("<3d")
